{"version":3,"sources":["components/Card/index.js","components/Wrapper/index.js","components/Nav/index.js","components/Counter/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["StarCard","props","react_default","a","createElement","className","onClick","handleClick","id","alt","name","src","image","occupation","Wrapper","children","Nav","Counter","event","style","score","display","userMessage","Footer","App","state","characters","clicked","highScore","characterId","_this","includes","setState","setTimeout","this","bind","Object","assertThisInitialized","shuffle","handleIncrement","push","length","i","j","Math","floor","random","_ref","_this2","components_Nav","components_Counter","components_Wrapper","map","character","Card","key","location","components_Footer","React","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b996f6a0.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\n\n\nfunction StarCard(props){\n    return(\n        <div className = \"card\" onClick={() => {props.handleClick(props.id)}} >\n            <div className = \"img-container\">\n            <img alt={props.name} src={props.image} id=\"cardImg\" />\n            </div>\n            <div className=\"content\">\n            <ul>\n            <li>\n                <strong>Name:</strong> {props.name}\n            </li>\n            <li>\n                <strong>Occupation:</strong> {props.occupation}\n            </li>\n            <li>\n            \n            </li>\n\n            </ul>\n            </div>\n        </div>\n    )\n}\n\nexport default StarCard;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n    return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\n\nfunction Nav() {\n    return (\n        <nav className=\"navbar navbar-light bg-light\">\n            <span className=\"navbar-text\">\n                Galaxy Click\n             </span>\n        </nav>\n    );\n}\nexport default Nav;\n","import React from 'react';\nimport './style.css';\n\nfunction Counter(event){\n    return(\n        <div className=\"jumbotron jumbotron-fluid\" id=\"counter\">\n        <div className=\"container\">\n            <h1 className=\"display-4\" id=\"scoreClicked\" style={(event.score > 0)? {}:{display:'none'}} > {event.score} </h1>\n            <h2 className=\"lead\" id=\"winLose\"> {event.userMessage}</h2>\n        </div>\n        </div>\n    )\n}\n\nexport default Counter;\n\n","import React from 'react';\nimport './style.css';\n\nfunction Footer() {\n    return (\n        <footer className=\"page-footer font-small blue\">\n\n            <div className=\"footer-copyright text-center py-3\">Â© 2018 Copyright PhilD203\n          </div>\n\n        </footer>\n    )\n}\n\nexport default Footer;","import React from 'react';\nimport './App.css';\nimport './components/Card/index';\nimport StarCard from './components/Card/index';\nimport characters from './mockData/starCards.json';\nimport Wrapper from './components/Wrapper';\nimport Nav from './components/Nav';\nimport Counter from './components/Counter';\nimport Footer from './components/Footer'\n\nclass App extends React.Component {\n\nstate = {\n  characters,\n  clicked: [],\n  score: 0,\n  highScore: 0,\n  userMessage: \"\"\n}\n\nhandleClick = characterId => {\n    if (this.state.clicked.includes(characterId)){\n        this.setState({userMessage:\"YOU LOSE\"})\n          setTimeout(\n            function() {\n              this.setState({userMessage:\"\"});\n            }\n            .bind(this),\n            3000\n        );\n        this.setState({score:0})\n        this.shuffle(this.state.characters);\n        this.setState({clicked: []})\n    } else{\n        this.handleIncrement();\n        this.state.clicked.push(characterId);\n        this.shuffle(this.state.characters);\n        if(this.state.score === this.state.characters.length -1){\n          this.setState({userMessage: \"YOU WIN\"})\n          setTimeout(\n            function() {\n              this.setState({userMessage:\"\"});\n            }\n            .bind(this),\n            3000\n          );\n          this.setState({score:0})\n          this.shuffle(this.state.characters);\n          this.setState({clicked: []})\n      }\n    }\n}\nhandleIncrement = () => {\n  this.setState({ score: this.state.score + 1 });\n};\n shuffle(a) {\n  for (let i = a.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n}\n\nrender() {\n  return (\n      <div>\n        <Nav />\n        <Counter \n          score={this.state.score}\n          userMessage={this.state.userMessage}\n        />\n        <Wrapper >\n        {this.state.characters.map(character =>(\n        <StarCard \n          key={character.id}\n          id={character.id}\n          name={character.name}\n          image={character.image}\n          occupation={character.occupation}\n          location={character.location}\n          handleClick={this.handleClick}\n        />\n        ))}\n        </Wrapper>\n        <Footer />\n    \n      </div>\n    \n  )\n}\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}